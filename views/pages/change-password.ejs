<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Change Password</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      .password-strength {
        height: 5px;
        transition: all 0.3s ease;
        border-radius: 2px;
      }
      .password-criteria {
        transition: all 0.3s ease;
      }
      .criteria-met {
        color: #10b981;
      }
      .error-message {
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.3s ease;
      }
      .error-message.show {
        opacity: 1;
        transform: translateY(0);
      }
    </style>
  </head>
  <body
    class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen flex items-center justify-center p-4"
  >
    <div class="bg-white shadow-xl rounded-xl w-full max-w-md overflow-hidden">
      <!-- Header -->
      <div class="bg-indigo-600 text-white p-6">
        <h1 class="text-2xl font-bold text-center">Change Password</h1>
        <p class="text-center text-indigo-100 mt-2">
          Create a strong, secure password
        </p>
      </div>

      <!-- Error Message Container -->
      <div
        id="formError"
        class="error-message mx-6 mt-4 p-3 bg-red-50 border border-red-200 text-red-600 rounded-lg hidden"
      >
        <i class="fa-solid fa-circle-exclamation mr-2"></i>
        <span id="errorText"></span>
      </div>

      <!-- Form -->
      <form class="p-6 space-y-5" id="changePasswordForm">
        <!-- Current Password -->
        <div class="relative">
          <label
            class="block mb-1 text-gray-600 font-medium"
            for="currentPassword"
          >
            Current Password
          </label>
          <input
            type="password"
            name="currentPassword"
            id="currentPassword"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400 focus:outline-none transition"
            placeholder="Enter your current password"
          />
          <span
            class="absolute right-3 top-10 text-gray-400 cursor-pointer toggle-password"
          >
            <i class="fa-solid fa-eye-slash"></i>
          </span>
          <p
            id="currentPasswordError"
            class="text-sm text-red-500 mt-1 hidden error-field"
          >
            <i class="fa-solid fa-circle-exclamation mr-1"></i>
            <span></span>
          </p>
        </div>

        <!-- New Password -->
        <div class="relative">
          <label class="block mb-1 text-gray-600 font-medium" for="newPassword">
            New Password
          </label>
          <input
            type="password"
            name="newPassword"
            id="newPassword"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400 focus:outline-none transition"
            placeholder="Create a new password"
          />
          <span
            class="absolute right-3 top-10 text-gray-400 cursor-pointer toggle-password"
          >
            <i class="fa-solid fa-eye-slash"></i>
          </span>

          <!-- Password Strength Meter -->
          <div class="flex mt-2 space-x-1">
            <div class="password-strength flex-1 bg-gray-200"></div>
            <div class="password-strength flex-1 bg-gray-200"></div>
            <div class="password-strength flex-1 bg-gray-200"></div>
            <div class="password-strength flex-1 bg-gray-200"></div>
          </div>

          <!-- Password Criteria -->
          <div class="mt-3 text-sm">
            <p class="password-criteria text-gray-500" id="lengthCriteria">
              <i class="fa-solid fa-circle mr-2"></i>At least 8 characters
            </p>
            <p class="password-criteria text-gray-500" id="numberCriteria">
              <i class="fa-solid fa-circle mr-2"></i>Contains a number
            </p>
            <p class="password-criteria text-gray-500" id="specialCriteria">
              <i class="fa-solid fa-circle mr-2"></i>Contains a special
              character
            </p>
          </div>

          <p
            id="newPasswordError"
            class="text-sm text-red-500 mt-1 hidden error-field"
          >
            <i class="fa-solid fa-circle-exclamation mr-1"></i>
            <span></span>
          </p>
        </div>

        <!-- Confirm New Password -->
        <div class="relative">
          <label
            class="block mb-1 text-gray-600 font-medium"
            for="confirmPassword"
          >
            Confirm New Password
          </label>
          <input
            type="password"
            name="confirmPassword"
            id="confirmPassword"
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400 focus:outline-none transition"
            placeholder="Confirm your new password"
          />
          <span
            class="absolute right-3 top-10 text-gray-400 cursor-pointer toggle-password"
          >
            <i class="fa-solid fa-eye-slash"></i>
          </span>
          <p
            id="confirmPasswordError"
            class="text-sm text-red-500 mt-1 hidden error-field"
          >
            <i class="fa-solid fa-circle-exclamation mr-1"></i>
            <span></span>
          </p>
        </div>

        <!-- Submit Button -->
        <button
          type="submit"
          class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          id="submitButton"
        >
          Update Password
        </button>

        <!-- Back to Profile Link -->
        <div class="text-center">
          <a
            href="/profile"
            class="text-indigo-600 hover:text-indigo-800 text-sm font-medium"
          >
            <i class="fa-solid fa-arrow-left mr-2"></i>Back to Profile
          </a>
        </div>
      </form>

      <!-- Success Message (Initially Hidden) -->
      <div
        id="successMessage"
        class="hidden p-6 bg-green-50 border-t border-green-200"
      >
        <div class="flex items-center">
          <div class="bg-green-100 p-2 rounded-full">
            <i class="fa-solid fa-check text-green-600 text-xl"></i>
          </div>
          <div class="ml-4">
            <h3 class="text-green-800 font-semibold">
              Password Updated Successfully!
            </h3>
            <p class="text-green-600 text-sm">
              Your password has been changed.
            </p>
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("changePasswordForm");
        const currentPasswordInput = document.getElementById("currentPassword");
        const newPasswordInput = document.getElementById("newPassword");
        const confirmPasswordInput = document.getElementById("confirmPassword");
        const submitButton = document.getElementById("submitButton");
        const successMessage = document.getElementById("successMessage");
        const formError = document.getElementById("formError");
        const errorText = document.getElementById("errorText");

        // Password strength elements
        const strengthBars = document.querySelectorAll(".password-strength");
        const lengthCriteria = document.getElementById("lengthCriteria");
        const numberCriteria = document.getElementById("numberCriteria");
        const specialCriteria = document.getElementById("specialCriteria");

        // Error elements
        const errorFields = document.querySelectorAll(".error-field");

        // Toggle password visibility
        document.querySelectorAll(".toggle-password").forEach((toggle) => {
          toggle.addEventListener("click", function () {
            const input = this.parentElement.querySelector("input");
            const icon = this.querySelector("i");

            if (input.type === "password") {
              input.type = "text";
              icon.classList.remove("fa-eye-slash");
              icon.classList.add("fa-eye");
            } else {
              input.type = "password";
              icon.classList.remove("fa-eye");
              icon.classList.add("fa-eye-slash");
            }
          });
        });

        // Clear all error messages
        function clearErrors() {
          errorFields.forEach((field) => {
            field.classList.add("hidden");
          });
          formError.classList.add("hidden");
          formError.classList.remove("show");

          // Reset input borders
          currentPasswordInput.classList.remove("border-red-500");
          newPasswordInput.classList.remove("border-red-500");
          confirmPasswordInput.classList.remove("border-red-500");
        }

        // Show error message for a specific field
        function showFieldError(fieldId, message) {
          const errorField = document.getElementById(fieldId);
          errorField.querySelector("span").textContent = message;
          errorField.classList.remove("hidden");

          // Highlight the problematic field
          const inputField = document.getElementById(
            fieldId.replace("Error", "")
          );
          inputField.classList.add("border-red-500");
        }

        // Show general form error
        function showFormError(message) {
          errorText.textContent = message;
          formError.classList.remove("hidden");
          setTimeout(() => {
            formError.classList.add("show");
          }, 10);
        }

        // Validate new password strength
        newPasswordInput.addEventListener("input", function () {
          clearErrors();
          const password = this.value;
          let strength = 0;

          // Validate length
          if (password.length >= 8) {
            strength++;
            lengthCriteria.classList.add("criteria-met");
            lengthCriteria.classList.remove("text-gray-500");
            lengthCriteria.innerHTML =
              '<i class="fa-solid fa-check-circle mr-2"></i>At least 8 characters';
          } else {
            lengthCriteria.classList.remove("criteria-met");
            lengthCriteria.classList.add("text-gray-500");
            lengthCriteria.innerHTML =
              '<i class="fa-solid fa-circle mr-2"></i>At least 8 characters';
          }

          // Validate number
          if (/\d/.test(password)) {
            strength++;
            numberCriteria.classList.add("criteria-met");
            numberCriteria.classList.remove("text-gray-500");
            numberCriteria.innerHTML =
              '<i class="fa-solid fa-check-circle mr-2"></i>Contains a number';
          } else {
            numberCriteria.classList.remove("criteria-met");
            numberCriteria.classList.add("text-gray-500");
            numberCriteria.innerHTML =
              '<i class="fa-solid fa-circle mr-2"></i>Contains a number';
          }

          // Validate special character
          if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
            strength++;
            specialCriteria.classList.add("criteria-met");
            specialCriteria.classList.remove("text-gray-500");
            specialCriteria.innerHTML =
              '<i class="fa-solid fa-check-circle mr-2"></i>Contains a special character';
          } else {
            specialCriteria.classList.remove("criteria-met");
            specialCriteria.classList.add("text-gray-500");
            specialCriteria.innerHTML =
              '<i class="fa-solid fa-circle mr-2"></i>Contains a special character';
          }

          // Update strength bars
          strengthBars.forEach((bar, index) => {
            if (index < strength) {
              switch (strength) {
                case 1:
                  bar.style.backgroundColor = "#EF4444"; // red
                  break;
                case 2:
                  bar.style.backgroundColor = "#F59E0B"; // amber
                  break;
                case 3:
                  bar.style.backgroundColor = "#10B981"; // green
                  break;
                case 4:
                  bar.style.backgroundColor = "#10B981"; // green
                  break;
              }
            } else {
              bar.style.backgroundColor = "#E5E7EB"; // gray
            }
          });
        });

        // Validate password confirmation
        confirmPasswordInput.addEventListener("input", function () {
          clearErrors();
          if (newPasswordInput.value !== confirmPasswordInput.value) {
            showFieldError("confirmPasswordError", "Passwords do not match");
          }
        });

        // Form submission
        form.addEventListener("submit", async function (e) {
          e.preventDefault();
          clearErrors();

          // Basic validation
          if (!currentPasswordInput.value) {
            showFieldError(
              "currentPasswordError",
              "Current password is required"
            );
            return;
          }

          if (!newPasswordInput.value) {
            showFieldError("newPasswordError", "New password is required");
            return;
          }

          if (newPasswordInput.value.length < 8) {
            showFieldError(
              "newPasswordError",
              "Password must be at least 8 characters"
            );
            return;
          }

          if (!confirmPasswordInput.value) {
            showFieldError(
              "confirmPasswordError",
              "Please confirm your password"
            );
            return;
          }

          if (newPasswordInput.value !== confirmPasswordInput.value) {
            showFieldError("confirmPasswordError", "Passwords do not match");
            return;
          }

          // Get form data
          const formData = {
            currentPassword: currentPasswordInput.value,
            newPassword: newPasswordInput.value,
            confirmPassword: confirmPasswordInput.value,
          };

          // Disable submit button
          submitButton.disabled = true;
          submitButton.innerHTML =
            '<i class="fa-solid fa-spinner fa-spin mr-2"></i>Updating...';

          try {
            // Make API call to change password
            const response = await fetch("/change-password", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(formData),
            });

            const data = await response.json();

            if (data.success) {
              showSuccess();
            } else {
              // Show error message based on server response
              if (data.field) {
                showFieldError(`${data.field}Error`, data.message);
              } else {
                showFormError(data.message);
              }

              submitButton.disabled = false;
              submitButton.innerHTML = "Update Password";
            }
          } catch (error) {
            console.error("Error:", error);
            showFormError("An error occurred. Please try again.");
            submitButton.disabled = false;
            submitButton.innerHTML = "Update Password";
          }
        });

        function showSuccess() {
          successMessage.classList.remove("hidden");
          form.classList.add("hidden");
          formError.classList.add("hidden");

          // Reset form and enable button after success
          setTimeout(() => {
            form.reset();
            submitButton.disabled = false;
            submitButton.innerHTML = "Update Password";

            // Reset strength indicators
            strengthBars.forEach((bar) => {
              bar.style.backgroundColor = "#E5E7EB";
            });

            const criteria = document.querySelectorAll(".password-criteria");
            criteria.forEach((c) => {
              c.classList.remove("criteria-met");
              c.classList.add("text-gray-500");
              c.innerHTML = c.innerHTML.replace("fa-check-circle", "fa-circle");
            });
          }, 3000);
        }
      });
    </script>
  </body>
</html>
